node {
    // config 
    def to = emailextrecipients([
            [$class: 'CulpritsRecipientProvider'],
            [$class: 'DevelopersRecipientProvider'],
            [$class: 'RequesterRecipientProvider']
    ])`
    // stages
    try {
        def commit_id
        stage('Preparation') {
            checkout scm
            sh "git rev-parse --short HEAD > .git/commit-id"
            sh "wget https://raw.githubusercontent.com/RanSolo/bash_profile/main/utility/.profile"
            sh "echo 'export \"source ~/.profile.1\" >> ~/.profile\'"
            commit_id = readFile('.git/commit-id').trim()
        }
        stage('test with a DB') {
            def mongo = docker.image('mongo').run("-e MONGO_ALLOW_EMPTY_PASSWORD=yes --rm")
            def myTestContainer = docker.image('node:12.18.4')
            myTestContainer.pull()
            myTestContainer.inside("--link ${mongo.id}:mongo") { // using linking, mongo will be available at host: mongo, port: 27017
                sh 'npm install'
                sh 'npm test'
            }
        }
        stage('docker build/push') {
            docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
              def app = docker.build("ransolo/docker-nodejs-demo:${commit_id}", '.').push()
            }
        }
    } catch(e){
    // mark build as failed
    currentBuild.result = "FAILURE";
    // set variables
    def subject = "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} ${currentBuild.result}"
    def content = '${JELLY_SCRIPT,template="html"}'

    // send email
    if(to != null && !to.isEmpty()) {
      emailext(body: content, mimeType: 'text/html',
         replyTo: '$DEFAULT_REPLYTO', subject: subject,
         to: to, attachLog: true )
    }

    // mark current build as a failure and throw the error
    throw e;
    }
}